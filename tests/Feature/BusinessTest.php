<?php

namespace Tests\Feature;

use App\Responsitory\Business;
use App\Responsitory\Products;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;

class BusinessTest extends TestCase
{
    /**
     * A basic test example.
     *
     * @return void
     */
  /*  public function testExample()
    {
        $this->assertTrue(true);
    }*/

    private $business;
    public function __construct($name = null, array $data = [], $dataName = '')
    {
        $this->business = new Business();
        parent::__construct($name, $data, $dataName);
    }

    protected function setUp()
    {
        $this->business = new Business();
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testAdminGetProductCate(){
        $this->assertEquals([5, 1], $this->business->adminGetProductCate(1));
    }

    public function testAdminGetAllProductsFromCate(){
        $this->assertEquals([3,4], $this->business->adminGetAllProductsFromCate(3));
//        $this->assertNull($this->business->adminGetAllProductsFromCate(4));
        $this->assertEquals([], $this->business->adminGetAllProductsFromCate(4));
    }

    public function testAdminGetAllProducts(){
        $this->assertEquals(4, $this->business->adminGetAllProducts());
    }

    public function testadminGetAllOrders(){
        $this->assertEquals(0, $this->business->adminGetAllOrders());
    }

    public function testAdminGetAllCustomer(){
        $this->assertEquals(0, $this->business->adminGetAllOrders());
    }

    public function testadminGetProductQuantity(){
        $this->assertArraySubset(['4' => 40], $this->business->adminGetProductQuantity());
        $this->assertArraySubset(['3' => 60], $this->business->adminGetProductQuantity());
        $this->assertContains(50, $this->business->adminGetProductQuantity());
    }

 /*   public function testadminGetProductAttribute(){
        $this->assertContains(Products::findOrFail(1)->toArray(), $this->business->adminGetProductAttribute(1));
    }*/

}
